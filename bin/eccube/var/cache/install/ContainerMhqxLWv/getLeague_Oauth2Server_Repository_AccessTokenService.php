<?php

namespace ContainerMhqxLWv;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLeague_Oauth2Server_Repository_AccessTokenService extends Eccube_KernelInstallContainer
{
    /*
     * Gets the private 'league.oauth2_server.repository.access_token' shared service.
     *
     * @return \League\Bundle\OAuth2ServerBundle\Repository\AccessTokenRepository
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/RepositoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/AccessTokenRepositoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server-bundle/src/Repository/AccessTokenRepository.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server-bundle/src/Converter/ScopeConverterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server-bundle/src/Converter/ScopeConverter.php';

        $a = ($container->privates['league.oauth2_server.manager.doctrine.client'] ?? $container->load('getLeague_Oauth2Server_Manager_Doctrine_ClientService'));

        if (isset($container->privates['league.oauth2_server.repository.access_token'])) {
            return $container->privates['league.oauth2_server.repository.access_token'];
        }

        return $container->privates['league.oauth2_server.repository.access_token'] = new \League\Bundle\OAuth2ServerBundle\Repository\AccessTokenRepository(($container->privates['league.oauth2_server.manager.doctrine.access_token'] ?? $container->load('getLeague_Oauth2Server_Manager_Doctrine_AccessTokenService')), $a, ($container->privates['league.oauth2_server.converter.scope'] ?? ($container->privates['league.oauth2_server.converter.scope'] = new \League\Bundle\OAuth2ServerBundle\Converter\ScopeConverter())));
    }
}
