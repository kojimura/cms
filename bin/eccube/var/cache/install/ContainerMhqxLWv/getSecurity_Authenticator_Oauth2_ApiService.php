<?php

namespace ContainerMhqxLWv;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_Oauth2_ApiService extends Eccube_KernelInstallContainer
{
    /*
     * Gets the private 'security.authenticator.oauth2.api' shared service.
     *
     * @return \League\Bundle\OAuth2ServerBundle\Security\Authenticator\OAuth2Authenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authenticator/AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/EntryPoint/AuthenticationEntryPointInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server-bundle/src/Security/Authenticator/ForwardCompatAuthenticatorTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server-bundle/src/Security/Authenticator/OAuth2Authenticator.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/ResourceServer.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/CryptKey.php';

        $a = ($container->privates['league.oauth2_server.repository.access_token'] ?? $container->load('getLeague_Oauth2Server_Repository_AccessTokenService'));

        if (isset($container->privates['security.authenticator.oauth2.api'])) {
            return $container->privates['security.authenticator.oauth2.api'];
        }

        return $container->privates['security.authenticator.oauth2.api'] = new \League\Bundle\OAuth2ServerBundle\Security\Authenticator\OAuth2Authenticator(($container->privates['league.oauth2_server.factory.psr_http'] ?? $container->load('getLeague_Oauth2Server_Factory_PsrHttpService')), new \League\OAuth2\Server\ResourceServer($a, new \League\OAuth2\Server\CryptKey($container->getEnv('ECCUBE_OAUTH2_RESOURCE_SERVER_PUBLIC_KEY'), NULL, false)), ($container->privates['Eccube\\Security\\Core\\User\\MemberProvider'] ?? $container->load('getMemberProviderService')), 'ROLE_OAUTH2_');
    }
}
