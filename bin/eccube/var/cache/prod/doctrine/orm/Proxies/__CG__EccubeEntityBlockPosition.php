<?php

namespace Proxies\__CG__\Eccube\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class BlockPosition extends \Eccube\Entity\BlockPosition implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'section', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'block_id', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'layout_id', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'block_row', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'Block', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'Layout'];
        }

        return ['__isInitialized__', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'section', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'block_id', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'layout_id', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'block_row', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'Block', '' . "\0" . 'Eccube\\Entity\\BlockPosition' . "\0" . 'Layout'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (BlockPosition $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setSection($section)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSection', [$section]);

        return parent::setSection($section);
    }

    /**
     * {@inheritDoc}
     */
    public function getSection()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getSection();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSection', []);

        return parent::getSection();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockId($blockId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockId', [$blockId]);

        return parent::setBlockId($blockId);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockId', []);

        return parent::getBlockId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLayoutId($layoutId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLayoutId', [$layoutId]);

        return parent::setLayoutId($layoutId);
    }

    /**
     * {@inheritDoc}
     */
    public function getLayoutId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLayoutId', []);

        return parent::getLayoutId();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockRow($blockRow = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockRow', [$blockRow]);

        return parent::setBlockRow($blockRow);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockRow()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockRow', []);

        return parent::getBlockRow();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlock(\Eccube\Entity\Block $block = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlock', [$block]);

        return parent::setBlock($block);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlock', []);

        return parent::getBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function setLayout(\Eccube\Entity\Layout $Layout = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLayout', [$Layout]);

        return parent::setLayout($Layout);
    }

    /**
     * {@inheritDoc}
     */
    public function getLayout()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLayout', []);

        return parent::getLayout();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$offset]);

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($offset, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$offset, $value]);

        return parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$offset]);

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$offset]);

        return parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function setPropertiesFromArray(array $arrProps, array $excludeAttribute = array (
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPropertiesFromArray', [$arrProps, $excludeAttribute, $parentClass]);

        return parent::setPropertiesFromArray($arrProps, $excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(array $excludeAttribute = array (
  0 => '__initializer__',
  1 => '__cloner__',
  2 => '__isInitialized__',
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', [$excludeAttribute, $parentClass]);

        return parent::toArray($excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function toNormalizedArray(array $excludeAttribute = array (
  0 => '__initializer__',
  1 => '__cloner__',
  2 => '__isInitialized__',
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toNormalizedArray', [$excludeAttribute]);

        return parent::toNormalizedArray($excludeAttribute);
    }

    /**
     * {@inheritDoc}
     */
    public function toJSON(array $excludeAttribute = array (
  0 => '__initializer__',
  1 => '__cloner__',
  2 => '__isInitialized__',
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toJSON', [$excludeAttribute]);

        return parent::toJSON($excludeAttribute);
    }

    /**
     * {@inheritDoc}
     */
    public function toXML(array $excludeAttribute = array (
  0 => '__initializer__',
  1 => '__cloner__',
  2 => '__isInitialized__',
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toXML', [$excludeAttribute]);

        return parent::toXML($excludeAttribute);
    }

    /**
     * {@inheritDoc}
     */
    public function copyProperties($srcObject, array $excludeAttribute = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'copyProperties', [$srcObject, $excludeAttribute]);

        return parent::copyProperties($srcObject, $excludeAttribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityIdentifierAsArray(\Eccube\Entity\AbstractEntity $Entity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityIdentifierAsArray', [$Entity]);

        return parent::getEntityIdentifierAsArray($Entity);
    }

}
